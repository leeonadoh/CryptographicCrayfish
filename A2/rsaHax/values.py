# Hex representation:
# B55F6BB97D8ABA26D62DF6F458977F1703F5B35C5863694D2371EF141E9A419C8B1DCEDF967ADD6268CEB28A73E249DB9E68DFBE897790C6FFC085CA0B63BDD09B04B55F14D87C9616AE726E5D0BC1BCDC1A284E82F6BF482C5DDB768010BFC5734FC9500E36A5A00D4A7DA495056323EC06D3D3B5D88EC863958C840BF013CD
# Integer representation:
n = 127364267597139493540723331204339211194586014817451203830799795925196194691202462897905850883866904868892415046580817569176239367692303288839770474652109700848358432405752683726342528889678012214522325274056903064820951043366005591893083764579470069805619180603771671383915933692672583275832310594117217293261
n1 = 3884719136963078467396315718673386512967019979000758062477158721800350717460075721911505157142323704635418098492123734270653660544074556201412129015071500871961

# Result of prime factorization
p = 8194124624414046878093826113
q = 15543364719846102734035905265021007874527909072857707530407929290687101099950235380124854710034333308285660202980757696503925683873746491877865507719899027251207102262278680571817169261263452242836721127096300509656928177929591710741117876178047883330343700515792044255540432173197

# Calculated value of phi
phi = 127364267597139493540723331188795846474739912083415298565778788050668285618344755367497921593179803768942179666455962859141906059406643085859012778148184016974611940527887176006443501638470909952243644702239733803557498800529284464796783254922541891876027469862653795205868050362320688635415852291698691293952

e = 65537

#Password for keystore.p12
pwd = "leetHax"

def gcd(a, b):
    while b:
        a, b = b, a%b
    return a

# Sanity check for value correctness.
if __name__ == '__main__':
	print(gcd(n, n1))

	# print("Modulus n: " + str(n) + "\n")
	# print("e: " + str(e) + "\n")
	# print("p: " + str(p) + "\n")
	# print("q: " + str(q) + "\n")
	# print("phi(n): " + str(phi) + "\n")

	# print("Checking p * q = n: " + str(n == p*q))
	# print("Checking (p-1)*(q-1) = phi: " + str(phi == (p-1)*(q-1)) + "\n")

	# d = 0
	# i = 1
	# while ( (e*d) % phi != 1):
	# 	d = i * (phi + 1) / e;
	# 	i += 1
	# i -= 1
	# print ("d: " + str(d) + "\n")
	# print ("k: " + str(i) + "\n")

	# print ("d < phi(n)? " + str(d < phi))

